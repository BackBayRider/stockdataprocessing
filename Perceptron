from dateutil.parser import parse
from dateutil.relativedelta import relativedelta
import pandas
import numpy
from sklearn.linear_model import Perceptron
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler
from PatternsProcessor import PatternProcessor
from StockDataDownloader import StockDataDownloader as d

indicies=[2,3,4,5]
compareIndex=3
period = 5

proc = PatternProcessor()
downloader = d.StockDataDownloader()

ddata = pandas.read_csv('Derivatives.dat').as_matrix()
ests = list()
for nCandles in range(1, 20):
    for i in range(0, ddata.__len__()-1):
        contractName = ddata[i][0]
        em = ddata[i][1]
        marketCode = ddata[i][2]
        train_date_start = parse(ddata[i][3])
        real_date_stop = parse(ddata[i][4])
        train_date_stop = train_date_start + relativedelta(months=+1)
        real_date_start = train_date_stop + relativedelta(days=+1)
        #print " Checking ", contractName
        train_data = downloader.get_data_from_finam(contractName, period, marketCode, em, train_date_start, train_date_stop)
        (rows, classes) = proc.get_patterns(train_data, nCandles, indicies, compareIndex)
        clf = Perceptron()
        scaler = StandardScaler()
        X = scaler.fit_transform(rows)
        clf.fit(X, classes)
        test_data = downloader.get_data_from_finam(contractName, period, marketCode, em, real_date_start, real_date_stop)
        (rows, classes) = proc.get_patterns(test_data, nCandles, indicies, compareIndex)
        X = scaler.fit_transform(rows)
        acc = accuracy_score(classes, clf.predict(X))
        ests.append(acc)
    print nCandles, ': Mean acc = ', numpy.mean(ests)
